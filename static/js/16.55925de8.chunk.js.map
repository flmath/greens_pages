{"version":3,"sources":["private_pages/ErlangDBG/CodeBlock.js","private_pages/ErlangDBG/sections/TraceFunction.js"],"names":["CodeBlock","_this$props","this","props","language","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_6__","style","coy","PureComponent","defaultProps","__webpack_require__","r","__webpack_exports__","d","TraceFunction","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_markdown__WEBPACK_IMPORTED_MODULE_1__","react_markdown__WEBPACK_IMPORTED_MODULE_1___default","_CodeBlock__WEBPACK_IMPORTED_MODULE_2__","className","source","renderers","code"],"mappings":"iLAKMA,mLAUK,IAAAC,EACqBC,KAAKC,MAAzBC,EADDH,EACCG,SAAUC,EADXJ,EACWI,MAClB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBL,SAAUA,EAAUM,MAAOC,OAC3CN,UAdeO,iBAAlBZ,EAMGa,aAAe,CACpBT,SAAU,MAaCJ,6CCzBfc,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,IAIe,SAASI,EAAcf,GAuEpC,OACEiB,EAAAb,EAAAC,cAAA,OAAKiB,UAAU,mBACbL,EAAAb,EAAAC,cAACe,EAAAhB,EAAD,CAAemB,OAtErB,soFAsEoCC,UAAW,CAAEC,KAAM5B","file":"static/js/16.55925de8.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={coy}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from \"../CodeBlock\";\n\nexport default function TraceFunction(props) {\n\nconst input =\n'Tracing all functions in a module is sometimes too much for printout readability.\\n'+\n'Fortunately, it is easy to narrow tracing to a specific function. Lets trace `traced_function/2`. First, let us use `dbg:tp`\\n'+\n'```erlang\\n'+\n' > dbg:tp({tracing_experiments, traced_function, 2},[]),\\n'+\n' > tracing_experiments:switch_state().\\n'+                 \n' tracing_experiments.erl:86:<0.134.0>: io:format called from state enter_heavy_state number 49\\n'+\n'```\\n'+\n'\\n'+\n'```erlang\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' ok\\n'+\n'```\\n'+\n\n'Since `traced_function/2` is local we do not get any additional traces. Lets add local tracing.\\n'+\n'```erlang\\n'+\n' > dbg:tpl({tracing_experiments, traced_function, 2},[]),\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' tracing_experiments.erl:86:<0.134.0>: io:format called from state enter_light_state number 108\\n'+\n' (<0.134.0>) call tracing_experiments:traced_function(enter_light_state,108)\\n'+\n'```\\n'+\n'\\n'+\n'```erlang\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' ok\\n'+\n'```\\n'+\n'It works fine, lets extract a little more information, \\n'+\n'the second argument in `dbg:tp/2` can take a form of `[{ MatchHead, MatchConditions, MatchBody }]`.\\n'+\n\n'MatchHead can be `\\'_\\'` for anonymous variables or we can match it to the variable `\\'$1\\'` to display it later.\\n'+\n\n'```erlang\\n'+\n' > dbg:tpl({tracing_experiments, traced_function, 2},[{\\'$1\\', [], [{display, \\'$1\\'}]}]),\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' [enter_light_state,228]\\n'+\n' tracing_experiments.erl:86:<0.134.0>: io:format called from state enter_light_state number 228\\n'+\n' (<0.134.0>) call tracing_experiments:traced_function(enter_light_state,228)\\n'+\n'```\\n'+\n'\\n'+\n'```erlang\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' ok\\n'+\n'```\\n'+\n\n'So the function is called with parameters enter_light_state and 228.\\n'+\n'Lets return in body two more pieces of information.\\n'+\n'The first what values is returned from the function:\\n'+\n\n'```erlang\\n'+\n' > dbg:tpl({tracing_experiments, traced_function, 2},[{\\'_\\', [], [ {return_trace}]}]),\\n'+\n' > tracing_experiments:switch_state().\\n'+                                         \n' tracing_experiments.erl:86:<0.134.0>: io:format called from state enter_heavy_state number 5\\n'+\n' (<0.134.0>) call tracing_experiments:traced_function(enter_heavy_state,5)\\n'+\n' (<0.134.0>) returned from tracing_experiments:traced_function/2 -> ok\\n'+\n' ok\\n'+\n'```\\n'+\n'\\n'+\n'```erlang\\n'+\n' > tracing_experiments:switch_state().\\n'+\n' ok\\n'+\n'```\\n'+\n'It returns an `ok` atom from debug printing function. \\n'+\n'It is worth mentioning that according to documentation `{return_trace}` can\\n'+\n'interfere with the system behavior.\\n'+\n'If you want also the `\\'EXIT\\'` messages to be displayed you can replace `{return_trace}` with `{exception_trace}` instead.\\n'+\n'\\n'+\n'Reference: [Erlang documentation: functions allowed only for tracing.](http://erlang.org/doc/apps/erts/match_spec.html#functions-allowed-only-for-tracing)\\n'\n\n\n  return (\n    <div className=\"my_md_container\">\n      <ReactMarkdown source={input} renderers={{ code: CodeBlock }}/>\n    </div>\n  );\n}\n"],"sourceRoot":""}