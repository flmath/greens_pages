{"version":3,"sources":["private_pages/ErlangDBG/CodeBlock.js","private_pages/ErlangDBG/sections/CustomHandlerSignals.js"],"names":["CodeBlock","_this$props","this","props","language","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_6__","style","coy","PureComponent","defaultProps","__webpack_require__","r","__webpack_exports__","d","CustomHandlerSignals","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_markdown__WEBPACK_IMPORTED_MODULE_1__","react_markdown__WEBPACK_IMPORTED_MODULE_1___default","_CodeBlock__WEBPACK_IMPORTED_MODULE_2__","className","source","renderers","code"],"mappings":"iLAKMA,mLAUK,IAAAC,EACqBC,KAAKC,MAAzBC,EADDH,EACCG,SAAUC,EADXJ,EACWI,MAClB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBL,SAAUA,EAAUM,MAAOC,OAC3CN,UAdeO,iBAAlBZ,EAMGa,aAAe,CACpBT,SAAU,MAaCJ,6CCzBfc,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,IAIe,SAASI,EAAqBf,GAmC3C,OACEiB,EAAAb,EAAAC,cAAA,OAAKiB,UAAU,mBACdL,EAAAb,EAAAC,cAACe,EAAAhB,EAAD,CAAemB,OAjCpB,o6BAiCmCC,UAAW,CAAEC,KAAM5B","file":"static/js/11.2c849190.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={coy}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from \"../CodeBlock\";\n\nexport default function CustomHandlerSignals(props) {\n\nconst input =\n\n'One thing extra we should learn is catching exit and error messages.\\n'+\n'We can use the Fun function to see how those messages look like:\\n'+\n'```erlang\\n'+\n' FunExit = fun\\n'+\n'  (#trace{type=exit,mfa=Reason}, MsgNo)->\\n'+\n'  io:format(\"Value: ~p Value MsgNo: ~p~n\", [{exit, Reason}, MsgNo]),\\n'+\n'  dbg:stop();\\n'+\n' (_, MsgNo) -> MsgNo\\n'+\n' end.\\n'+\n'```\\n'+\n'\\n'+\n'```erlang\\n'+\n' > dbg:tracer(process,{FunExit,0}).\\n'+\n'```\\n'+\n' Lets trace process events, aside of calls.\\n'+\n'\\n'+\n'```erlang\\n'+\n' > dbg:p(all,[p,c]).\\n'+\n'```\\n'+\n'\\n'+\n' And invoke termination with one of the below functions:\\n'+\n'```erlang\\n'+\n' gen_statem:cast({global, tracing_experiments}, wrong_cast).\\n'+\n' exit(global:whereis_name(tracing_experiments), \"something\").\\n'+\n' exit(global:whereis_name(tracing_experiments), kill).\\n'+\n' exit(global:whereis_name(tracing_experiments), normal).\\n'+\n' ...\\n'+\n'```\\n'+\n'Of course, when we are dealing with local processes we should replace \\n'+\n'the `global:whereis_name(ProcessName)` with the `whereis(ProcessName)`.'\n\n  return (\n    <div className=\"my_md_container\">\n     <ReactMarkdown source={input} renderers={{ code: CodeBlock }}/>\n    </div>\n  );\n}\n"],"sourceRoot":""}